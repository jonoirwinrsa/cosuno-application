{"version":3,"sources":["components/Navigation.js","pages/CompaniesPage.js","pages/HomePage.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","Header","mode","theme","style","lineHeight","Item","to","CompaniesPage","useState","filterText","setFilterText","filteredItems","items","filter","item","description","toLocaleLowerCase","includes","name","itemsToDisplay","padding","type","placeholder","value","onChange","e","target","grid","gutter","column","dataSource","renderItem","index","height","cover","alt","src","logo","Meta","avatar","title","HomePage","Title","level","role","aria-label","rel","href","App","minHeight","Content","maxWidth","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43328c64.chunk.js","sourcesContent":["import { Layout, Menu } from \"antd\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = () => (\n  <Layout.Header>\n    <Menu mode=\"horizontal\" theme=\"dark\" style={{ lineHeight: \"64px\" }}>\n      <Menu.Item>\n        <Link to=\"/\">Home</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to=\"/companies\">Companies</Link>\n      </Menu.Item>\n    </Menu>\n  </Layout.Header>\n);\n\nexport default Navigation;\n","import Avatar from \"antd/es/avatar\";\nimport Card from \"antd/es/card\";\nimport Input from \"antd/es/input\";\nimport List from \"antd/es/list\";\nimport React, { useState } from \"react\";\nimport items from \"./companies.json\";\n\nconst CompaniesPage = () => {\n  const [filterText, setFilterText] = useState(\"\");\n\n  const filteredItems = items.filter(\n    item =>\n      item.description.toLocaleLowerCase().includes(filterText) ||\n      item.name.toLocaleLowerCase().includes(filterText)\n  );\n\n  const itemsToDisplay = filterText ? filteredItems : items;\n\n  return (\n    <div style={{ padding: \"20px 50px\" }}>\n      <h1>Companies</h1>\n      <Input\n        type=\"text\"\n        placeholder=\"Filter companies by name or description\"\n        value={filterText}\n        onChange={e => setFilterText(e.target.value.toLocaleLowerCase())}\n      />\n      <hr />\n      <List\n        grid={{ gutter: 16, column: 3 }}\n        dataSource={itemsToDisplay}\n        renderItem={(item, index) => (\n          <List.Item>\n            <Card\n              style={{ height: 600 }}\n              cover={\n                <img alt={item.name} src={`${item.logo}?image=${index}`} />\n              }\n            >\n              <Card.Meta\n                avatar={<Avatar src={item.logo} />}\n                title={item.name}\n                description={item.description}\n              />\n            </Card>\n          </List.Item>\n        )}\n      />\n    </div>\n  );\n};\n\nexport default CompaniesPage;\n","import { Typography } from \"antd\";\nimport React from \"react\";\n\nconst HomePage = () => (\n  <div style={{ padding: \"20px 50px\" }}>\n    <Typography.Title level={1}>\n      Hello from South Africa{\" \"}\n      <span role=\"img\" aria-label=\"wave\">\n        üëã\n      </span>\n    </Typography.Title>\n    <p>\n      My name is <b>Jonathan Irwin</b>.{\" \"}\n      <span role=\"img\" aria-label=\"man\">\n        üôã\n      </span>\n    </p>\n    <p>\n      I'm the lead developer at a company called SovTech based in Johannesburg.{\" \"}\n      <span role=\"img\" aria-label=\"city\">\n        üèô\n      </span>\n    </p>\n    <p>\n      I am moving to Berlin in August 2020 and I think Cosuno looks really cool.{\" \"}\n      <span role=\"img\" aria-label=\"thumbs-up\">\n        üëç\n      </span>\n    </p>\n    <p>\n      Check me out on{\" \"}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://medium.com/@jonoirwin\"\n      >\n        Medium\n      </a>\n      ,{\" \"}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://stackoverflow.com/users/2804256/jonathan-irwin\"\n      >\n        Stack overflow\n      </a>\n      ,{\" \"}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/jonoirwinrsa/\"\n      >\n        GitHub\n      </a>\n      ,{\" \"}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://linkedin.com/in/jono-irwin/\"\n      >\n        LinkedIn\n      </a>{\" \"}\n      and{\" \"}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://twitter.com/jonoirwin\"\n      >\n        Twitter.\n      </a>\n    </p>\n    <hr />\n    <Typography.Title level={2}>About this submission</Typography.Title>\n    <p>\n      Tests run and pass locally.\n    </p>\n    <p>\n      Not all routes are covered by tests but 100% code coverage was not the\n      goal\n    </p>\n    <p>\n      Ant Design none ES bundle was used to make this look good <b>fast</b> but\n      I would normally consider the package weight to be an issue in a real life\n      project\n    </p>\n  </div>\n);\n\nexport default HomePage;\n","import { Layout } from \"antd\";\nimport React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport Navigation from \"./components/Navigation\";\nimport CompaniesPage from \"./pages/CompaniesPage\";\nimport HomePage from \"./pages/HomePage\";\n\nconst App = () => (\n  <Layout style={{ minHeight: \"100vh\" }}>\n    <Navigation />\n    <Layout.Content style={{ maxWidth: \"1200px\" }}>\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route exact path=\"/companies\" component={CompaniesPage} />\n      </Switch>\n    </Layout.Content>\n  </Layout>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"antd/dist/antd.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}